{"id":3220,"fid":"2960","name":"统计已测试设备","slug":"count-tested-devices-after-test-operations","link":"https://leetcode.cn/problems/count-tested-devices-after-test-operations/description/","percent":83.54695587872813,"level":"Easy","category":"algorithms","en_name":"Count Tested Devices After Test Operations","cn_name":"统计已测试设备","totalAC":"22.2K","totalSubmit":"25.1K","likes":21,"dislikes":0,"desc":"<p>给你一个长度为 <code>n</code> 、下标从<strong> 0 </strong>开始的整数数组 <code>batteryPercentages</code> ，表示 <code>n</code> 个设备的电池百分比。</p>\n\n<p>你的任务是按照顺序测试每个设备 <code>i</code>，执行以下测试操作：</p>\n\n<ul>\n\t<li>如果 <code>batteryPercentages[i]</code> <strong>大于</strong> <code>0</code>：\n\n\t<ul>\n\t\t<li><strong>增加</strong> 已测试设备的计数。</li>\n\t\t<li>将下标在 <code>[i + 1, n - 1]</code> 的所有设备的电池百分比减少 <code>1</code>，确保它们的电池百分比<strong> 不会低于</strong> <code>0</code> ，即 <code>batteryPercentages[j] = max(0, batteryPercentages[j] - 1)</code>。</li>\n\t\t<li>移动到下一个设备。</li>\n\t</ul>\n\t</li>\n\t<li>否则，移动到下一个设备而不执行任何测试。</li>\n</ul>\n\n<p>返回一个整数，表示按顺序执行测试操作后 <strong>已测试设备</strong> 的数量。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>batteryPercentages = [1,1,2,1,3]\n<strong>输出：</strong>3\n<strong>解释：</strong>按顺序从设备 0 开始执行测试操作：\n在设备 0 上，batteryPercentages[0] &gt; 0 ，现在有 1 个已测试设备，batteryPercentages 变为 [1,0,1,0,2] 。\n在设备 1 上，batteryPercentages[1] == 0 ，移动到下一个设备而不进行测试。\n在设备 2 上，batteryPercentages[2] &gt; 0 ，现在有 2 个已测试设备，batteryPercentages 变为 [1,0,1,0,1] 。\n在设备 3 上，batteryPercentages[3] == 0 ，移动到下一个设备而不进行测试。\n在设备 4 上，batteryPercentages[4] &gt; 0 ，现在有 3 个已测试设备，batteryPercentages 保持不变。\n因此，答案是 3 。\n</pre>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>batteryPercentages = [0,1,2]\n<strong>输出：</strong>2\n<strong>解释：</strong>按顺序从设备 0 开始执行测试操作：\n在设备 0 上，batteryPercentages[0] == 0 ，移动到下一个设备而不进行测试。\n在设备 1 上，batteryPercentages[1] &gt; 0 ，现在有 1 个已测试设备，batteryPercentages 变为 [0,1,1] 。\n在设备 2 上，batteryPercentages[2] &gt; 0 ，现在有 2 个已测试设备，batteryPercentages 保持不变。\n因此，答案是 2 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == batteryPercentages.length &lt;= 100 </code></li>\n\t<li><code>0 &lt;= batteryPercentages[i] &lt;= 100</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int countTestedDevices(vector<int>& batteryPercentages) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int countTestedDevices(int[] batteryPercentages) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def countTestedDevices(self, batteryPercentages):\n        \"\"\"\n        :type batteryPercentages: List[int]\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def countTestedDevices(self, batteryPercentages: List[int]) -> int:"},{"value":"c","text":"C","defaultCode":"int countTestedDevices(int* batteryPercentages, int batteryPercentagesSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int CountTestedDevices(int[] batteryPercentages) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} batteryPercentages\n * @return {number}\n */\nvar countTestedDevices = function(batteryPercentages) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function countTestedDevices(batteryPercentages: number[]): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $batteryPercentages\n     * @return Integer\n     */\n    function countTestedDevices($batteryPercentages) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func countTestedDevices(_ batteryPercentages: [Int]) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun countTestedDevices(batteryPercentages: IntArray): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int countTestedDevices(List<int> batteryPercentages) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func countTestedDevices(batteryPercentages []int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} battery_percentages\n# @return {Integer}\ndef count_tested_devices(battery_percentages)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def countTestedDevices(batteryPercentages: Array[Int]): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn count_tested_devices(battery_percentages: Vec<i32>) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (count-tested-devices batteryPercentages)\n  (-> (listof exact-integer?) exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec count_tested_devices(BatteryPercentages :: [integer()]) -> integer().\ncount_tested_devices(BatteryPercentages) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec count_tested_devices(battery_percentages :: [integer]) :: integer\n  def count_tested_devices(battery_percentages) do\n    \n  end\nend"}],"testcase":"[1,1,2,1,3]","testable":true,"templateMeta":{"name":"countTestedDevices","params":[{"name":"batteryPercentages","type":"integer[]"}],"return":{"type":"integer"}}}